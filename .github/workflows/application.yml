# CI/CD Pipeline for Task 3

name: Daimler-Truck WebApp CI/CD

# Controls when the workflow will run.
on:
  # Triggers the workflow on push events only for the main branch.
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

permissions:
  # Allow the OIDC JWT ID token to be requested
  id-token: write
  # Allow OIDC use the “checkout” action
  contents: read

env:
  AWS_REGION: us-west-1
  ASSUME_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  test:
    ## Configure the operating system the workflow should run on.
    runs-on: ubuntu-20.04
    ## Define a sequence of steps to be executed
    steps:
      ## Use the public `checkout` action  in version v2
      ## to checkout the existing code in the repository
      - uses: actions/checkout@v2
        ## Use the public `setup-python` actoin  in version v2
        ## to install python on the Ubuntu based environment.
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      ## Install all necessary dependecies within the requirements.txt file.
      - name: Install dependencies
        run: |
          cd app
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      ## Run all pytests by inovking the `pytest command`
      - name: Test with pytest
        run: |
          pytest

  build_deploy:
    needs: [test]
    runs-on: ubuntu-20.04
    outputs:
      IMAGE_TAG: ${{ steps.docker-build.outputs.image-tag }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Build and push
        id: docker-build
        env:
          USER: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          cd app
          export IMAGE_TAG=$(git rev-parse --short HEAD)
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

          docker build --platform linux/amd64 -t sre-tblx .
          docker tag sre-tblx ${USER}/sre-tblx:${IMAGE_TAG}
          docker push ${USER}/sre-tblx:${IMAGE_TAG}
          echo "::set-output name=image-tag::$IMAGE_TAG"

  deploy_eks_infrastructure:
    needs: [build_deploy]
    runs-on: ubuntu-20.04
    steps:
      - name: Check Out
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.ASSUME_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy EKS Cluster
        id: deploy-eks
        env:
          new-tag: ${{ needs.build_deploy.outputs.IMAGE_TAG }}
        run: |
          # Install kubectl
          cd infrastructure/setup_environment
          ./kubectl-setup.sh

          # Deploy EKS cluster with IaC
          cd ../"terraform-kubernetes(EKS)"
          terraform init -input=false
          terraform apply --auto-approve

          # Obtain kube config from cluster
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}
      - name: Configure AWS Credentials for deployment
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy manifest files
        run: |
          # Deploy Kubernetes manifests
          cd infrastructure/"terraform-kubernetes(EKS)/manifests

          # Change the image tag in the deployment.yaml
          # export newtag=$new-tag
          # sed -i -E "s/sre-tblx:([a-zA-]*)/sre-tblx:$newtag/g" deployment.yaml

          kubectl apply -f .; sleep 60 
          kubectl get ing -n daimler-truck
